[alias]
#    # fetch and checkout a MR.
#    # use like `git mr mr-number` or `git mr remote mr-number` - e.g. `git mr origin 4`
#    mr = !sh -c 'test -z $2 && REMOTE="origin" || REMOTE=$1 && git fetch $REMOTE merge-requests/$2/head:mr-${REMOTE}-$2 && git checkout mr-${REMOTE}-$2' -
#    st = status -s
#
#    wt = worktree
#    wta = worktree add
#    wtr = worktree remove
#    wtl = worktree list
#
#    # add and commit everything.
#    ca = !git add -A && git commit -av
#    cap = !git add -A && git commit -av && git publish
#    co = checkout
#
#    # really stash everything
#    stash-all = stash save --include-untracked
#
#    # better format for git log.
#    glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
#
#    # show the diff between the last commit and the current state
#    d = "!f() { git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat; }; f"
#
#    # switch to a branch, creating it if necessary
#    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
#    gom = "!f() { git checkout -b \"$1\" main 2> /dev/null || git checkout \"$1\"; }; f"
#
#    # list aliases
#    aliases = config --get-regexp alias
#
#    # amend the currently staged files to the latest commit
#    amend = commit --amend --reuse-message=HEAD
#
#    # Show verbose output about tags, branches or remotes
#    tags = tag -l
#    branches = branch -a
#    remotes = remote -v
#
#    # remove old tag with this name and tag latest commit with it.
#    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1 && git push origin --tags ;}; r"
#
#    delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
#
#    # list contributors with number of commits
#    contributors = shortlog --summary --numbered
#
#    # makes more sense
#    publish = "!branchname=$(git rev-parse --abbrev-ref HEAD); git push -u origin $branchname"
#
#    # see which remote we're tracking
#    show-remote = rev-parse --abbrev-ref --symbolic-full-name @{u}
#
#    ## from kbd/setup on github
#    commit-info = show --no-patch --date=short --format='%S%x00%C(green)%ad%C(reset) %C(magenta)%C(italic)%<(40,trunc)%S%C(reset) %C(auto)%h %C(blue)%<(15,trunc)%an %C(auto)%<(65,trunc)%s%D%C(reset)'
#
#    fp = push --force-with-lease

[credential "https://github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
[user]
	name = Chris Privitere
	email = 23177737+cprivitere@users.noreply.github.com
[pull]
	rebase = true
[fetch]
	prune = true
[diff]
	colorMoved = zebra
[rebase]
	autostash = true
[merge]
	autostash = true
[core]
	editor = code --wait
[commit]
    verbose = 2
    template = ~/.config/git/commit-template
[init]
	defaultbranch = main
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
